# -*- coding: utf-8 -*-
"""LVADSUSR124-Sushil-IA2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bcwbdxt_DqxbujYr_6fruMjgDTjxH6oI
"""

## 1
import numpy as np
rgb_image=np.array([[[255,0,0],[0,255,0],[0,0,255]],[[255,255,0],[255,0,255],[0,255,255]],[[127,127,127],[200,200,200],[50,50,50]]])
print(rgb_image)
def rgb_to_grayscale(rgb_image):

    coefficients = np.array([0.2989, 0.5870, 0.1140])

    grayscale_image = np.dot(rgb_image, coefficients)

    return grayscale_image
rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                      [[255, 255, 0], [255, 0, 255], [0, 255, 255]],
                      [[127, 127, 127], [200, 200, 200], [50, 50, 50]]])
grayscale_image = rgb_to_grayscale(rgb_image)
print(grayscale_image)

## 2
def normalize(a):
    b = np.zeros(9).reshape(3,3)
    for i in range(len(a)):
        for j in range(len(a[i])):
           b[i][j] = (a[i][j] - a[i].mean())/(a[i].std())

    return b

## 3
a=np.array([[12,23,42],[32,43,54]])
b=np.array([[12,23,42],[32,43,54]])
c=np.array([[12,23,42],[32,43,54]])
np.stack((a.flatten(),b.flatten(),c.flatten()),axis=0)

## 4
import numpy as np

old_per = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])

new_per = np.array([[11, 22, 33],
                    [44, 55, 66],
                    [77, 88, 99]])

def performance_score(performance):

    return np.mean(performance, axis=1)


old_scores = performance_score(old_per)
new_scores = performance_score(new_per)

comparing = np.column_stack((old_scores, new_scores))


print("Athlete  Old Score  New Score")
for i, (old_score, new_score) in enumerate(comparing):
    print(f"Athlete {i+1}:   {old_score}      {new_score}")

## 5
a=np.array([[50,60,70,80,100],[50,60,70,80,80],[50,60,50,80,-1]])
lists=[]
for i in range(len(a)):
  j=2
  avg=0
  count=0
  while 1:
    if(j>len(a)+1):
      break
    else:
      if(a[i,j]!=-1):
        avg+=a[i,j]
        count+=1
      j+=1
  avg=round(avg/count,2)
  lists.append(avg)
print("average marks of each student:" )
print(lists)

## 6
def apply_adjustment_factors(city_temperatures, adjustment_factors):

    adjusted_factors = adjustment_factors.reshape(1, -1)
    adjusted_temperatures = city_temperatures * adjusted_factors

    return adjusted_temperatures
city_temperatures = np.array([
    [20, 25, 30, 28],
    [15, 18, 22, 20],
    [10, 12, 14, 16]
])
adjustment_factors = np.array([0.95, 0.98, 1.05, 1.02])

adjusted_temperatures = apply_adjustment_factors(city_temperatures, adjustment_factors)

print("Original temperatures:")
print(city_temperatures)
print("\nAdjusted temperatures:")
print(adjusted_temperatures)

## 7
import pandas as pd
data={"name":["alice","bob","charlie","david","eve","frank","Grace"],
      "age":[25,30,35,40,45,50,55],"city":["nyk","la","chicago","houston"
      ,"phoenix","miami","la"],
      "department":["hr","it","finance","marketing","sales","it","hr"]}
df=pd.DataFrame(data)
df1=df[(df["department"]!="hr")&(df["age"]<45)]
print(df1[["name","city"]])

## 8
data={"product":["apple","banana","cherry","dates","flour","grapes"],"category":["fruit","fruit","fruit","fruit","bakery","fruit",],"price":[12,8,5,5,4,10],"promotion":[True,True,False,True,True,False]}
df=pd.DataFrame(data)
df1=df.groupby("category").mean("price")
df2=pd.merge(df1,df,on="category",how="left")
df2=df2[(df2["price_y"]>df2["price_x"])&(df2["promotion_y"]==True) & (df2["category"]=="fruit")]
print(df2["product"])

## 9
employee_data={"employee":["alice","bob","charlie","david"],
               "department":["hr","it","finance","it"],
               "manager":["john","rachel","emily","rachel"]}
project_data={"employee":["alice","charlie","eve"],
              "project":["p1","p3","p2"]}
df1=pd.DataFrame(employee_data)
df2=pd.DataFrame(project_data)
df3=pd.merge(df1,df2,on="employee",how="left")
print(df3)

## 10
data={"department":["electronics","electronics","clothing","clothing","Home goods"],
      "salesperson":["alice","bob","charlie","david","eve"],"sales":
      [70000,50000,30000,40000,60000]}
df=pd.DataFrame(data)
print(df.groupby(["department","salesperson"]).sum())