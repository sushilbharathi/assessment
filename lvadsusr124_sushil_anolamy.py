# -*- coding: utf-8 -*-
"""LVADSUSR124_sushil-Anolamy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vn3GWB7oEIxNpwXnuQ8akK6Wv-oR_ovc
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix,classification_report
from sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder
import time
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import IsolationForest
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")

data=pd.read_csv("https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch4-Assessment/main/social_network.csv")

print(data.columns)

# Handle missing values
print(data.isnull().sum())

# Outlier Handling
outlier_model = IsolationForest(contamination=0.1, random_state=42)
outliers = outlier_model.fit_predict(data[['login_activity', 'posting_activity', 'social_connections']])
data['is_outlier'] = outliers

#EDA
print(data.describe())

print(data.shape)

print(data.info())

# Summary statistics
print(data.describe())

# Histogram of numerical features
data.hist(figsize=(10, 8))
plt.tight_layout()
plt.show()

# Pairplot of numerical features
sns.pairplot(data, diag_kind='kde')
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

# Encoding data
label_encoder = LabelEncoder()
data['account_status'] = label_encoder.fit_transform(data['account_status'])

# Extracting significant features
features = ['login_activity', 'posting_activity', 'social_connections']

X = data[features]
y = data['is_outlier']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model development
model = IsolationForest(n_estimators=100, contamination=0.1, max_features=3, max_samples=10000, random_state=42)
model.fit(X_train)

# Predict the anomalies in the data
y_pred = model.predict(X_train)

# Add the predicted anomaly scores to the original dataframe
data["anomaly_score"] = model.decision_function(X)

anomalies = data.loc[data["anomaly_score"] < 0]

# Create a scatter plot of suspicious activity vs social connections
plt.scatter(data["social_connections"], data["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["social_connections"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Social Connections")
plt.ylabel("Anomaly Score")
plt.legend()
plt.show()