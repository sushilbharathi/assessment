# -*- coding: utf-8 -*-
"""IA1-PA-LVADSUSR124-SUSHIL-lab2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UiuGU1VhE6a07K6RE88G0gI66QkOsuns
"""

import pandas as pd
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
data=pd.read_csv("https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch4-Assessment/main/booking.csv")
df=data

## finding the null values
print(df.isnull().sum())
## from the below output we can clearly see that there is no null values or missing values in the given dataset

## finding the duplicate values
print(~df.duplicated())
df.drop_duplicates()

## from the below output we can clearly see that the data conatined some duplicate values and we removed the duplicates

## encoding the data
from sklearn.preprocessing import LabelEncoder
label_encoder=LabelEncoder()
df["Booking_ID"]=label_encoder.fit_transform(df["Booking_ID"])
df["type of meal"]=label_encoder.fit_transform(df["type of meal"])
df["room type"]=label_encoder.fit_transform(df["room type"])
df["market segment type"]=label_encoder.fit_transform(df["market segment type"])
df["booking status"]=label_encoder.fit_transform(df["booking status"])
df["date of reservation"]=label_encoder.fit_transform(df["date of reservation"])

## removing the outliners
for i in df.columns:
  Q1 = df[i].quantile(0.25)
  Q3 = df[i].quantile(0.75)
  IQR = Q3 - Q1
  # The outliers are data points beyong 1.5IQR of Q3 and below 1.5IQR of Q1

  lower_limit = Q1 - (1.5*IQR)
  upper_limit = Q3 + (1.5*IQR)
  df=df[~(df[i] < lower_limit) | (df[i] > upper_limit)]
## we have cleaned the data and looked for possible outliners and removed them

## there is not any unwanted columns in the features so we are not removing any columns
## duplicates have been removed during initial data cleaning

## seperating of features and labels
target=df["booking status"]
df=df.drop(["booking status"],axis=1)

## splitting of training and testing data

x_train,x_test,y_train,y_test=train_test_split(df,target,test_size=0.3,random_state=42)
y_train

## creating the model
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,classification_report
var_tree=LogisticRegression()
var_tree=var_tree.fit(x_train,y_train)
var_trees=var_tree.predict(x_test)
accuracy=accuracy_score(y_test,var_trees)
print("accuracy:",accuracy)
print(classification_report(y_test,var_trees))