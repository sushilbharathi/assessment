# -*- coding: utf-8 -*-
"""IA1-PA-LVADSUSR124-SUSHIL-lab1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SlsPzum9IFexZNCRdQPISY5SZuPekjnH
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
## cleaning of data

data=pd.read_csv("https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch4-Assessment/main/expenses.csv")
df=data
print(df.isnull().sum())
print(df.info)
## as we can see there is no null values in the given data

## checking for any duplicated values
print(~df.duplicated())
df.drop_duplicates()
## based on the output we get we can see that it contains duplicate values and we removed the duplicate values

for i in df.columns:
  print(i)

## here region column from the data is not necessery to identify the insurance cost
## droping of unncessary columns
df=df.drop(["region"],axis=1)

## encoding of the data
from sklearn.preprocessing import LabelEncoder
label_encoder=LabelEncoder()
df["sex"]=label_encoder.fit_transform(df["sex"])
df["smoker"]=label_encoder.fit_transform(df["smoker"])

## removing the outliners
for i in df.columns:
  Q1 = df[i].quantile(0.25)
  Q3 = df[i].quantile(0.75)
  IQR = Q3 - Q1
  # The outliers are data points beyong 1.5IQR of Q3 and below 1.5IQR of Q1

  lower_limit = Q1 - (1.5*IQR)
  upper_limit = Q3 + (1.5*IQR)
  df=df[~(df[i] < lower_limit) | (df[i] > upper_limit)]
## we have cleaned the data and looked for possible outliners and removed them

## seperating the features and target or labels
target=df["charges"]
df=df.drop(["charges"],axis=1)

## spletting the train and test data
x_train,x_test,y_train,y_test=train_test_split(df,target,train_size=0.3,random_state=42)

## training  and testing the model
from sklearn.metrics import accuracy_score
var_reg=LinearRegression()
var_reg=var_reg.fit(x_train,y_train)
var_answer=var_reg.predict(x_test)

#Evaluation
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

mse = mean_squared_error(y_test,var_answer)
rmse = np.sqrt(mse)
r2 = r2_score(y_test,var_answer)

print('MSE: ',mse)
print('RMSE: ',rmse)
print('R-Squared: ',r2)